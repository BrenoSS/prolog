move( [0,1,1,1,1], [0,0,1,1,1] ).
move( [0,1,1,1,1], [1,1,1,1,1] ).
move( [0,1,1,1,1], [2,1,1,1,1] ).
move( [1,1,1,1,1], [1,1,0,1,1] ).
move( [1,1,1,1,1], [0,1,1,1,1] ).
move( [1,1,1,1,1], [3,1,1,1,1] ).
move( [2,1,1,1,1], [2,1,1,0,1] ). 
move( [2,1,1,1,1], [3,1,1,1,1] ).
move( [2,1,1,1,1], [0,1,1,1,1] ).
move( [3,1,1,1,1], [3,1,1,1,0] ).
move( [3,1,1,1,1], [2,1,1,1,1] ).
move( [3,1,1,1,1], [1,1,1,1,1] ).
move( [0,0,1,1,1], [1,0,1,1,1] ).
move( [0,0,1,1,1], [2,0,1,1,1] ).
move( [1,1,0,1,1], [0,1,0,1,1] ).
move( [1,1,0,1,1], [3,1,0,1,1] ).
move( [2,1,1,0,1], [3,1,1,0,1] ).
move( [2,1,1,0,1], [0,1,1,0,1] ).
move( [3,1,1,1,0], [2,1,1,1,0] ).
move( [3,1,1,1,0], [1,1,1,1,0] ).
move( [1,0,1,1,1], [0,0,1,1,1] ).
move( [1,0,1,1,1], [1,0,0,1,1] ).
move( [1,0,1,1,1], [3,0,1,1,1] ).
move( [1,0,0,1,1], [0,0,0,1,1] ).
move( [1,0,0,1,1], [3,0,0,1,1] ).
move( [0,0,0,1,1], [1,0,0,1,1] ).
move( [0,0,0,1,1], [2,0,0,1,1] ).
move( [2,0,0,1,1], [2,0,0,0,1] ).
move( [2,0,0,1,1], [3,0,0,1,1] ).
move( [2,0,0,1,1], [0,0,0,1,1] ).
move( [2,0,0,0,1], [3,0,0,0,1] ).
move( [2,0,0,0,1], [0,0,0,0,1] ).
move( [3,0,0,0,1], [3,0,0,0,0] ).
move( [3,0,0,0,1], [2,0,0,0,1] ). 
move( [3,0,0,0,1], [1,0,0,0,1] ).
move( [3,0,1,1,1], [3,0,1,1,0] ).
move( [3,0,1,1,1], [2,0,1,1,1] ).
move( [3,0,1,1,1], [1,0,1,1,1] ).
move( [2,0,1,1,1], [2,0,1,0,1] ).
move( [2,0,1,1,1], [0,0,1,1,1] ).
move( [2,0,1,1,1], [3,0,1,1,1] ).
move( [3,0,0,1,1], [3,0,0,1,0] ).
move( [3,0,0,1,1], [2,0,0,1,1] ).
move( [3,0,0,1,1], [1,0,0,1,1] ).
move( [0,0,0,0,1], [1,0,0,0,1] ).
move( [0,0,0,0,1], [2,0,0,0,1] ).
move( [1,0,0,0,1], [0,0,0,0,1] ).
move( [1,0,0,0,1], [3,0,0,0,1] ).
move( [0,1,0,1,1], [0,0,0,1,1] ).
move( [0,1,0,1,1], [1,1,0,1,1] ).
move( [0,1,0,1,1], [2,1,0,1,1] ).
move( [2,1,0,1,1], [2,1,0,0,1] ).
move( [2,1,0,1,1], [0,1,0,1,1] ).
move( [2,1,0,1,1], [3,1,0,1,1] ).
move( [3,1,0,1,1], [3,1,0,1,0] ).
move( [3,1,0,1,1], [2,1,0,1,1] ).
move( [3,1,0,1,1], [1,1,0,1,1] ).
move( [0,1,0,0,1], [0,0,0,0,1] ).
move( [0,1,0,0,1], [1,1,0,0,1] ).
move( [0,1,0,0,1], [2,1,0,0,1] ).
move( [1,1,0,0,1], [0,1,0,0,1] ).
move( [1,1,0,0,1], [3,1,0,0,1] ).
move( [2,1,0,0,1], [3,1,0,0,1] ).
move( [2,1,0,0,1], [0,1,0,0,1] ).
move( [3,1,0,0,1], [3,1,0,0,0] ).
move( [3,1,0,0,1], [2,1,0,0,1] ).
move( [3,1,0,0,1], [1,1,0,0,1] ).
move( [1,1,0,0,0], [0,1,0,0,0] ).
move( [1,1,0,0,0], [3,1,0,0,0] ).
move( [2,1,0,0,0], [3,1,0,0,0] ).
move( [2,1,0,0,0], [0,1,0,0,0] ).
move( [3,1,0,0,0], [2,1,0,0,0] ).
move( [3,1,0,0,0], [1,1,0,0,0] ).
move( [0,1,1,0,1], [0,0,1,0,1] ).
move( [0,1,1,0,1], [1,1,1,0,1] ).
move( [0,1,1,0,1], [2,1,1,0,1] ).
move( [1,1,1,0,1], [1,1,0,0,1] ).
move( [1,1,1,0,1], [0,1,1,0,1] ).
move( [1,1,1,0,1], [3,1,1,0,1] ).
move( [3,1,1,0,1], [3,1,1,0,0] ).
move( [3,1,1,0,1], [2,1,1,0,1] ).
move( [3,1,1,0,1], [1,1,1,0,1] ).
move( [0,1,1,0,0], [0,0,1,0,0] ).
move( [0,1,1,0,0], [1,1,1,0,0] ).
move( [0,1,1,0,0], [2,1,1,0,0] ).
move( [1,1,1,0,0], [1,1,0,0,0] ).
move( [1,1,1,0,0], [0,1,1,0,0] ).
move( [1,1,1,0,0], [3,1,1,0,0] ).
move( [2,1,1,0,0], [3,1,1,0,0] ).
move( [2,1,1,0,0], [0,1,1,0,0] ).
move( [3,1,1,0,0], [2,1,1,0,0] ).
move( [3,1,1,0,0], [1,1,1,0,0] ).
move( [0,1,1,1,0], [0,0,1,1,0] ).
move( [0,1,1,1,0], [1,1,1,1,0] ).
move( [0,1,1,1,0], [2,1,1,1,0] ).
move( [1,1,1,1,0], [1,1,0,1,0] ).
move( [1,1,1,1,0], [0,1,1,1,0] ).
move( [1,1,1,1,0], [3,1,1,1,0] ).
move( [2,1,1,1,0], [2,1,1,0,0] ).
move( [2,1,1,1,0], [3,1,1,1,0] ).
move( [2,1,1,1,0], [0,1,1,1,0] ).
move( [0,0,1,0,0], [1,0,1,0,0] ).
move( [0,0,1,0,0], [2,0,1,0,0] ).
move( [2,0,1,0,0], [3,0,1,0,0] ).
move( [2,0,1,0,0], [0,0,1,0,0] ).
move( [3,0,1,0,0], [2,0,1,0,0] ).
move( [3,0,1,0,0], [1,0,1,0,0] ).
move( [0,0,1,1,0], [1,0,1,1,0] ).
move( [0,0,1,1,0], [2,0,1,1,0] ).
move( [1,0,1,1,0], [1,0,0,1,0] ).
move( [1,0,1,1,0], [0,0,1,1,0] ).
move( [1,0,1,1,0], [3,0,1,1,0] ).
move( [2,0,1,1,0], [2,0,1,0,0] ).
move( [2,0,1,1,0], [3,0,1,1,0] ).
move( [2,0,1,1,0], [0,0,1,1,0] ).
move( [3,0,1,1,0], [1,0,1,1,0] ).
move( [3,0,1,1,0], [2,0,1,1,0] ).
move( [2,0,1,0,1], [3,0,1,0,1] ).
move( [2,0,1,0,1], [0,0,1,0,1] ).
move( [3,0,0,1,0], [2,0,0,1,0] ).
move( [3,0,0,1,0], [1,0,0,1,0] ).
move( [3,1,0,1,0], [1,1,0,1,0] ).
move( [3,1,0,1,0], [2,1,0,1,0] ).
move( [0,0,1,0,1], [1,0,1,0,1] ).
move( [0,0,1,0,1], [2,0,1,0,1] ).
move( [1,1,0,1,0], [0,1,0,1,0] ).
move( [1,1,0,1,0], [3,1,0,1,0] ).
move( [1,0,0,1,0], [0,0,0,1,0] ).
move( [1,0,0,1,0], [3,0,0,1,0] ).
move( [3,0,1,0,1], [3,0,1,0,0] ).
move( [3,0,1,0,1], [2,0,1,0,1] ).
move( [3,0,1,0,1], [1,0,1,0,1] ).
move( [2,1,0,1,0], [2,1,0,0,0] ).
move( [2,1,0,1,0], [3,1,0,1,0] ).
move( [2,1,0,1,0], [0,1,0,1,0] ).
move( [1,0,1,0,1], [1,0,0,0,1] ).
move( [1,0,1,0,1], [0,0,1,0,1] ).
move( [1,0,1,0,1], [3,0,1,0,1] ).
move( [0,1,0,1,0], [0,0,0,1,0] ).
move( [0,1,0,1,0], [1,1,0,1,0] ).
move( [0,1,0,1,0], [2,1,0,1,0] ).
move( [0,0,0,1,0], [1,0,0,1,0] ).
move( [0,0,0,1,0], [2,0,0,1,0] ).
move( [3,0,0,0,0], [1,0,0,0,0] ).
move( [3,0,0,0,0], [2,0,0,0,0] ).
move( [0,0,0,0,0], [2,0,0,0,0] ).
move( [0,0,0,0,0], [1,0,0,0,0] ).
move( [1,0,0,0,0], [0,0,0,0,0] ).
move( [1,0,0,0,0], [3,0,0,0,0] ).
move( [2,0,0,0,0], [0,0,0,0,0] ).
move( [2,0,0,0,0], [3,0,0,0,0] ).
move( [0,1,0,0,0], [0,0,0,0,0] ).
move( [0,1,0,0,0], [1,1,0,0,0] ).
move( [0,1,0,0,0], [2,1,0,0,0] ).
move( [1,0,1,0,0], [1,0,0,0,0] ).
move( [1,0,1,0,0], [0,0,1,0,0] ).
move( [1,0,1,0,0], [3,0,1,0,0] ).
move( [2,0,0,1,0], [2,0,0,0,0] ).
move( [2,0,0,1,0], [3,0,0,1,0] ).
move( [2,0,0,1,0], [0,0,0,1,0] ).


best_first([ ], _ , _ ) :- write('Solução não encontrada'),nl,!.
best_first([[_,_,_,G,Pai]|T], C, [_,_,_,G,_]) :-
	write('open: '), printlist([ G | T ] ),nl,
	write('closed: '), printlist(C),nl,
	write('OBJETIVO: '), write(G), nl,
	write('Solução encontrada'), nl,
	write('Caminho: '),nl,
	escreverCaminho(G,Pai,C),!.

best_first([[F,D,H,S,Pai]|T], C, [_,_,_,G,_]) :-
	write('open: '), printlist([ S | T ] ),nl,
	write('closed: '), printlist(C),nl,
	findall(X, moves([F,D,H,S,Pai], T, C, X), List),
	write('nos gerados: '),printlist(List),nl,
	verificaOpen(List, T, NT),
	verificaClosed(List, C, NC,NT,NewT),
	verificaIgual(NewT, List, NList),
	verificaIgual(NC, NList, NL),
	mergeList(NewT, NL, NewList),
	sort(NewList,O),
	best_first(O, [[F,D,H,S,Pai] | NC], [_,_,_,G,_]).



verificaOpen([],T,T):-!.
verificaOpen([[A,G1,H1,B,Pai]|Z],T,Y):- member([_,_,_,B,_],T), troca([A,G1,H1,B,Pai],T,E), verificaOpen(Z, E, Y),!.
verificaOpen([[_,_,_,B,_]|Z],T,Y):-not(member([_,_,_,B,_],T)), verificaOpen(Z, T, Y).


verificaClosed([],C,C,T,T).
verificaClosed([[A,G1,H1,B,Pai]|Z], C, D, T, [[A,G1,H1,B,Pai]|Cauda]):-member([_,_,_,B,_],C), ehMenor([A,_,_,B,_],C), del([A,_,_,B,_],C,Y), verificaClosed(Z,Y,D,T,Cauda).
verificaClosed([[A,_,_,B,_]|Z], C, D, T, Cauda):-member([_,_,_,B,_],C), not(ehMenor([A,_,_,B,_],C)), verificaClosed(Z, C, D, T, Cauda).
verificaClosed([[_,_,_,B,_]|Z], C, D, T,Cauda):-not(member([_,_,_,B,_],C)), verificaClosed(Z, C, D, T, Cauda).

troca([A,G1,H1,B,Pai],[[C,_,_,B,_]|Z],[[A,G1,H1,B,Pai]|Z]):-B==B,A<C.
troca([A,_,_,B,_],[[C,G1,H1,B,Pai]|Z],[[C,G1,H1,B,Pai]|Z]):-B==B, A>=C.
troca([A,G1,H1,B,Pai],[[C,G2,H2,D,P]|Z],[[C,G2,H2,D,P]|W]):-B\==D,troca([A,G1,H1,B,Pai], Z, W).

verificaIgual(_, [], []).
verificaIgual(NT, [[_,_,_,A,_]|B], Z) :- member([_,_,_,A,_], NT), verificaIgual(NT,B,Z).
verificaIgual(NT, [[F1,G1,H1,A,Pai]|B], [[F1,G1,H1,A,Pai]|Z]) :- not(member([_,_,_,A,_], NT)), verificaIgual(NT,B,Z).


ehMenor([A,_,_,B,_],[[C,_,_,B,_]|_]):-A<C.
ehMenor([A,_,_,B,_],[[_,_,_,D,_]|T]):-B\==D,ehMenor([A,_,_,B,_],T).



mergeList([],L,L ).
mergeList([H|T],L,[H|M]):-
    mergeList(T,L,M).



moves([F,D,H,S,Pai], T, C, [NF,NG,NH,A,S]) :-
	move(S, A), S \== A,
	calculaG(S,A,D,NG),
	calculaH(A,NH),
	NF is NG + NH.

printlist([]).
printlist([X|List]) :-
        write(X),nl,
      printlist(List). 

del(Elem,[ ],[ ]).
del(Elem, [Elem|Y], Y).
del(Elem,[Elem1|Y], [Elem1|Z]) :-
	Elem \== Elem1,
	del(Elem,Y,Z).

conta1s([], 0).
conta1s([X|Y], N):-conta1s(Y, N1), N is N1 + X.


escreverCaminho(G,A,_):-A==0,write(G),nl,!.
escreverCaminho(G,Pai,C):-write(G),nl,findPai(Pai,P,C),escreverCaminho(Pai,P,C).

findPai(Pai, B, [[_,_,_,Pai,B]|T]):-!.
findPai(Pai, Y, [[_,_,_,B,_]|T]):-Pai\==B, findPai(Pai, Y, T).


calculaG([A|_],[C|_],B,D):-D is B + 1, A == C, !.
calculaG([A|_],[C|_],B,D):-D is B + 2, A == 0, C == 1, !.
calculaG([A|_],[C|_],B,D):-D is B + 2, A == 1, C == 0, !.
calculaG([A|_],[C|_],B,D):-D is B + 2, A == 2, C == 3, !.
calculaG([A|_],[C|_],B,D):-D is B + 2, A == 3, C == 2, !.
calculaG([A|_],[C|_],B,D):-D is B + 3, A == 0, C == 2, !.
calculaG([A|_],[C|_],B,D):-D is B + 3, A == 2, C == 0, !.
calculaG([A|_],[C|_],B,D):-D is B + 3, A == 1, C == 3, !.
calculaG([A|_],[C|_],B,D):-D is B + 3, A == 3, C == 1, !.

calculaH([X|Y],H):-conta1s(Y,H).



